// GENERATED by @edgedb/generate v0.3.3

export * from "./external.ts";
export { createClient } from "edgedb";
import * as $ from "./reflection.ts";
import * as $syntax from "./syntax.ts";
import * as $op from "./operators.ts";
import _std from "./modules/std.ts";
import _api from "./modules/api.ts";
import _b2c from "./modules/b2c.ts";
import _cal from "./modules/cal.ts";
import _cfg from "./modules/cfg.ts";
import _client from "./modules/client.ts";
import _default from "./modules/default.ts";
import _schema from "./modules/schema.ts";
import _sys from "./modules/sys.ts";
import _common from "./modules/common.ts";
import _category from "./modules/category.ts";
import _math from "./modules/math.ts";

const ExportDefault: typeof _std & 
  typeof _default & 
  $.util.OmitDollarPrefixed<typeof $syntax> & 
  typeof $op & {
  "std": typeof _std;
  "api": typeof _api;
  "b2c": typeof _b2c;
  "cal": typeof _cal;
  "cfg": typeof _cfg;
  "client": typeof _client;
  "default": typeof _default;
  "schema": typeof _schema;
  "sys": typeof _sys;
  "common": typeof _common;
  "category": typeof _category;
  "math": typeof _math;
} = {
  ..._std,
  ..._default,
  ...$.util.omitDollarPrefixed($syntax),
  ...$op,
  "std": _std,
  "api": _api,
  "b2c": _b2c,
  "cal": _cal,
  "cfg": _cfg,
  "client": _client,
  "default": _default,
  "schema": _schema,
  "sys": _sys,
  "common": _common,
  "category": _category,
  "math": _math,
};
const Cardinality = $.Cardinality;
type Cardinality = $.Cardinality;
export type Set<
  Type extends $.BaseType,
  Card extends $.Cardinality = $.Cardinality.Many
> = $.TypeSet<Type, Card>;


export default ExportDefault;
export { Cardinality };
