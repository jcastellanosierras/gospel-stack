// GENERATED by @edgedb/generate v0.3.3

import * as $ from "../reflection.ts";
import * as _ from "../imports.ts";
import type * as _std from "./std.ts";
import type * as _inventory from "./b2c/inventory.ts";
import type * as _sales from "./b2c/sales.ts";
import type * as _common from "./common.ts";
import type * as _category from "./category.ts";
import type * as _invoices from "./client/invoices.ts";
import type * as _api_usage from "./client/api_usage.ts";
import type * as _account from "./api/account.ts";
import type * as _product from "./api/product.ts";
import type * as _orders from "./client/orders.ts";
export type $AvailableRole = {
  "SUPERADMIN": $.$expr_Literal<$AvailableRole>;
  "ADMIN": $.$expr_Literal<$AvailableRole>;
  "USER": $.$expr_Literal<$AvailableRole>;
  "SUPPLIER": $.$expr_Literal<$AvailableRole>;
} & $.EnumType<"default::AvailableRole", ["SUPERADMIN", "ADMIN", "USER", "SUPPLIER"]>;
const AvailableRole: $AvailableRole = $.makeType<$AvailableRole>(_.spec, "6fc1d840-3699-11ee-a8b8-512ed0e6bbd5", _.syntax.literal);

export type $BrandState = {
  "ACTIVE": $.$expr_Literal<$BrandState>;
  "INACTIVE": $.$expr_Literal<$BrandState>;
  "PENDING_REVIEW": $.$expr_Literal<$BrandState>;
} & $.EnumType<"default::BrandState", ["ACTIVE", "INACTIVE", "PENDING_REVIEW"]>;
const BrandState: $BrandState = $.makeType<$BrandState>(_.spec, "6faf0d8c-3699-11ee-9de7-33d20e3f7d55", _.syntax.literal);

export type $ProductState = {
  "ACTIVE": $.$expr_Literal<$ProductState>;
  "INACTIVE": $.$expr_Literal<$ProductState>;
  "PENDING_REVIEW": $.$expr_Literal<$ProductState>;
} & $.EnumType<"default::ProductState", ["ACTIVE", "INACTIVE", "PENDING_REVIEW"]>;
const ProductState: $ProductState = $.makeType<$ProductState>(_.spec, "6fc5536c-3699-11ee-9821-cd190e03140a", _.syntax.literal);

export type $UserPermissons = {
  "UP_SELECT": $.$expr_Literal<$UserPermissons>;
  "UP_INSERT": $.$expr_Literal<$UserPermissons>;
  "UP_UPDATE": $.$expr_Literal<$UserPermissons>;
  "UP_DELETE": $.$expr_Literal<$UserPermissons>;
} & $.EnumType<"default::UserPermissons", ["UP_SELECT", "UP_INSERT", "UP_UPDATE", "UP_DELETE"]>;
const UserPermissons: $UserPermissons = $.makeType<$UserPermissons>(_.spec, "785af040-3699-11ee-a4e8-3566e9520993", _.syntax.literal);

export type $VerificationType = {
  "ONBOARDING": $.$expr_Literal<$VerificationType>;
  "TWOFA": $.$expr_Literal<$VerificationType>;
  "TWOFA_PENDING": $.$expr_Literal<$VerificationType>;
  "FORGOT_PASSWORD": $.$expr_Literal<$VerificationType>;
} & $.EnumType<"default::VerificationType", ["ONBOARDING", "TWOFA", "TWOFA_PENDING", "FORGOT_PASSWORD"]>;
const VerificationType: $VerificationType = $.makeType<$VerificationType>(_.spec, "6fcbe2e0-3699-11ee-8e72-9f48529266f7", _.syntax.literal);

export type $DatedTypeλShape = $.typeutil.flatten<_std.$Object_07d9fd2227fb11ee8ad3435ff4e00f5fλShape & {
  "created_at": $.PropertyDesc<_std.$datetime, $.Cardinality.One, false, false, true, true>;
  "updated_at": $.PropertyDesc<_std.$datetime, $.Cardinality.AtMostOne, false, false, false, false>;
}>;
type $DatedType = $.ObjectType<"default::DatedType", $DatedTypeλShape, null, [
  ..._std.$Object_07d9fd2227fb11ee8ad3435ff4e00f5f['__exclusives__'],
]>;
const $DatedType = $.makeType<$DatedType>(_.spec, "6fadbd60-3699-11ee-a9be-07ef68106961", _.syntax.literal);

const DatedType: $.$expr_PathNode<$.TypeSet<$DatedType, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($DatedType, $.Cardinality.Many), null);

export type $HasAvatarλShape = $.typeutil.flatten<_std.$Object_07d9fd2227fb11ee8ad3435ff4e00f5fλShape & {
  "avatar": $.LinkDesc<$Image, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
}>;
type $HasAvatar = $.ObjectType<"default::HasAvatar", $HasAvatarλShape, null, [
  ..._std.$Object_07d9fd2227fb11ee8ad3435ff4e00f5f['__exclusives__'],
]>;
const $HasAvatar = $.makeType<$HasAvatar>(_.spec, "6fc0dd96-3699-11ee-947b-812da5de29e9", _.syntax.literal);

const HasAvatar: $.$expr_PathNode<$.TypeSet<$HasAvatar, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($HasAvatar, $.Cardinality.Many), null);

export type $HasImagesλShape = $.typeutil.flatten<_std.$Object_07d9fd2227fb11ee8ad3435ff4e00f5fλShape & {
  "images": $.LinkDesc<$Image, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $HasImages = $.ObjectType<"default::HasImages", $HasImagesλShape, null, [
  ..._std.$Object_07d9fd2227fb11ee8ad3435ff4e00f5f['__exclusives__'],
]>;
const $HasImages = $.makeType<$HasImages>(_.spec, "6faf1746-3699-11ee-b180-4fe2551da263", _.syntax.literal);

const HasImages: $.$expr_PathNode<$.TypeSet<$HasImages, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($HasImages, $.Cardinality.Many), null);

export type $ApiKeyλShape = $.typeutil.flatten<$DatedTypeλShape & {
  "key": $.PropertyDesc<_std.$str, $.Cardinality.One, true, false, false, false>;
  "<api_keys[is Company]": $.LinkDesc<$Company, $.Cardinality.Many, {}, false, false,  false, false>;
  "<api_keys": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $ApiKey = $.ObjectType<"default::ApiKey", $ApiKeyλShape, null, [
  ...$DatedType['__exclusives__'],
  {key: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $ApiKey = $.makeType<$ApiKey>(_.spec, "732b6802-3699-11ee-880d-73563af67040", _.syntax.literal);

const ApiKey: $.$expr_PathNode<$.TypeSet<$ApiKey, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($ApiKey, $.Cardinality.Many), null);

export type $BrandλShape = $.typeutil.flatten<$DatedTypeλShape & $HasImagesλShape & $HasAvatarλShape & {
  "reference": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "state": $.PropertyDesc<$BrandState, $.Cardinality.One, false, false, false, true>;
  "owner": $.LinkDesc<$Company, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "description": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "name": $.PropertyDesc<_std.$str, $.Cardinality.One, true, false, false, false>;
  "<brands[is Image]": $.LinkDesc<$Image, $.Cardinality.Many, {}, false, false,  false, false>;
  "<brand[is b2c::inventory::Product]": $.LinkDesc<_inventory.$Product, $.Cardinality.Many, {}, false, false,  false, false>;
  "<brand[is Product]": $.LinkDesc<$Product, $.Cardinality.Many, {}, false, false,  false, false>;
  "<brands[is Company]": $.LinkDesc<$Company, $.Cardinality.Many, {}, false, false,  false, false>;
  "<brand": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<brands": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Brand = $.ObjectType<"default::Brand", $BrandλShape, null, [
  ...$DatedType['__exclusives__'],
  ...$HasImages['__exclusives__'],
  ...$HasAvatar['__exclusives__'],
  {name: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $Brand = $.makeType<$Brand>(_.spec, "6fafe37e-3699-11ee-bec6-8bf0c919fbb6", _.syntax.literal);

const Brand: $.$expr_PathNode<$.TypeSet<$Brand, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Brand, $.Cardinality.Many), null);

export type $CompanyλShape = $.typeutil.flatten<$DatedTypeλShape & $HasImagesλShape & $HasAvatarλShape & {
  "comercial_name": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "fiscal_name": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "is_manufacturer": $.PropertyDesc<_std.$bool, $.Cardinality.AtMostOne, false, false, false, true>;
  "vat": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, true, false, false, false>;
  "users": $.LinkDesc<$User, $.Cardinality.Many, {}, false, true,  false, false>;
  "api_keys": $.LinkDesc<$ApiKey, $.Cardinality.Many, {}, false, false,  false, false>;
  "brands": $.LinkDesc<$Brand, $.Cardinality.Many, {}, false, true,  false, false>;
  "<owner[is Brand]": $.LinkDesc<$Brand, $.Cardinality.Many, {}, false, false,  false, false>;
  "<company[is User]": $.LinkDesc<$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owner[is Product]": $.LinkDesc<$Product, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owner[is b2c::inventory::Product]": $.LinkDesc<_inventory.$Product, $.Cardinality.Many, {}, false, false,  false, false>;
  "<company[is current_user]": $.LinkDesc<$current_user, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owner[is b2c::sales::SaleOrderLine]": $.LinkDesc<_sales.$SaleOrderLine, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owner[is b2c::sales::SaleOrder]": $.LinkDesc<_sales.$SaleOrder, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owner[is common::HasCompanyOwner]": $.LinkDesc<_common.$HasCompanyOwner, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owner[is category::OwnerCategory]": $.LinkDesc<_category.$OwnerCategory, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owner[is common::HasCompanyOwnerPrivate]": $.LinkDesc<_common.$HasCompanyOwnerPrivate, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owner[is client::invoices::InvoiceLine]": $.LinkDesc<_invoices.$InvoiceLine, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owner[is client::invoices::Invoice]": $.LinkDesc<_invoices.$Invoice, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owner[is client::api_usage::Request]": $.LinkDesc<_api_usage.$Request, $.Cardinality.Many, {}, false, false,  false, false>;
  "<company": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owner": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Company = $.ObjectType<"default::Company", $CompanyλShape, null, [
  ...$DatedType['__exclusives__'],
  ...$HasImages['__exclusives__'],
  ...$HasAvatar['__exclusives__'],
  {vat: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $Company = $.makeType<$Company>(_.spec, "6fbebe62-3699-11ee-9642-5f83d1df339c", _.syntax.literal);

const Company: $.$expr_PathNode<$.TypeSet<$Company, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Company, $.Cardinality.Many), null);

export type $FileλShape = $.typeutil.flatten<$DatedTypeλShape & {
  "blob": $.PropertyDesc<_std.$bytes, $.Cardinality.One, false, false, false, false>;
  "<file[is Image]": $.LinkDesc<$Image, $.Cardinality.Many, {}, false, false,  false, false>;
  "<file": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $File = $.ObjectType<"default::File", $FileλShape, null, [
  ...$DatedType['__exclusives__'],
]>;
const $File = $.makeType<$File>(_.spec, "6fb15c04-3699-11ee-842e-173da9c3bba3", _.syntax.literal);

const File: $.$expr_PathNode<$.TypeSet<$File, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($File, $.Cardinality.Many), null);

export type $ImageλShape = $.typeutil.flatten<$DatedTypeλShape & {
  "alt": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "description": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "brands": $.LinkDesc<$Brand, $.Cardinality.Many, {}, false, true,  false, false>;
  "products": $.LinkDesc<$Product, $.Cardinality.Many, {}, false, true,  false, false>;
  "file": $.LinkDesc<$File, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "content_type": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "image_service_id": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "<images[is HasImages]": $.LinkDesc<$HasImages, $.Cardinality.Many, {}, false, false,  false, false>;
  "<images[is b2c::inventory::Product]": $.LinkDesc<_inventory.$Product, $.Cardinality.Many, {}, false, false,  false, false>;
  "<images[is Company]": $.LinkDesc<$Company, $.Cardinality.Many, {}, false, false,  false, false>;
  "<avatar[is HasAvatar]": $.LinkDesc<$HasAvatar, $.Cardinality.Many, {}, false, false,  false, false>;
  "<avatar[is User]": $.LinkDesc<$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "<images[is Product]": $.LinkDesc<$Product, $.Cardinality.Many, {}, false, false,  false, false>;
  "<avatar[is Company]": $.LinkDesc<$Company, $.Cardinality.Many, {}, false, false,  false, false>;
  "<avatar[is current_user]": $.LinkDesc<$current_user, $.Cardinality.Many, {}, false, false,  false, false>;
  "<images[is Brand]": $.LinkDesc<$Brand, $.Cardinality.Many, {}, false, false,  false, false>;
  "<avatar[is Brand]": $.LinkDesc<$Brand, $.Cardinality.Many, {}, false, false,  false, false>;
  "<avatar[is category::Category]": $.LinkDesc<_category.$Category, $.Cardinality.Many, {}, false, false,  false, false>;
  "<images[is category::Category]": $.LinkDesc<_category.$Category, $.Cardinality.Many, {}, false, false,  false, false>;
  "<images[is category::GlobalCategory]": $.LinkDesc<_category.$GlobalCategory, $.Cardinality.Many, {}, false, false,  false, false>;
  "<avatar[is category::GlobalCategory]": $.LinkDesc<_category.$GlobalCategory, $.Cardinality.Many, {}, false, false,  false, false>;
  "<images[is category::OwnerCategory]": $.LinkDesc<_category.$OwnerCategory, $.Cardinality.Many, {}, false, false,  false, false>;
  "<avatar[is category::OwnerCategory]": $.LinkDesc<_category.$OwnerCategory, $.Cardinality.Many, {}, false, false,  false, false>;
  "<avatar[is api::account::Account]": $.LinkDesc<_account.$Account, $.Cardinality.Many, {}, false, false,  false, false>;
  "<avatar[is api::account::User]": $.LinkDesc<_account.$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "<images[is api::product::Brand]": $.LinkDesc<_product.$Brand, $.Cardinality.Many, {}, false, false,  false, false>;
  "<avatar[is api::product::Brand]": $.LinkDesc<_product.$Brand, $.Cardinality.Many, {}, false, false,  false, false>;
  "<images[is api::product::Product]": $.LinkDesc<_product.$Product, $.Cardinality.Many, {}, false, false,  false, false>;
  "<avatar[is api::product::Category]": $.LinkDesc<_product.$Category, $.Cardinality.Many, {}, false, false,  false, false>;
  "<images[is api::product::Category]": $.LinkDesc<_product.$Category, $.Cardinality.Many, {}, false, false,  false, false>;
  "<images[is api::product::GlobalCategory]": $.LinkDesc<_product.$GlobalCategory, $.Cardinality.Many, {}, false, false,  false, false>;
  "<avatar[is api::product::GlobalCategory]": $.LinkDesc<_product.$GlobalCategory, $.Cardinality.Many, {}, false, false,  false, false>;
  "<images[is api::product::OwnerCategory]": $.LinkDesc<_product.$OwnerCategory, $.Cardinality.Many, {}, false, false,  false, false>;
  "<avatar[is api::product::OwnerCategory]": $.LinkDesc<_product.$OwnerCategory, $.Cardinality.Many, {}, false, false,  false, false>;
  "<avatar[is api_current_user]": $.LinkDesc<$api_current_user, $.Cardinality.Many, {}, false, false,  false, false>;
  "<avatar[is api_current_account]": $.LinkDesc<$api_current_account, $.Cardinality.Many, {}, false, false,  false, false>;
  "<avatar": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<images": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Image = $.ObjectType<"default::Image", $ImageλShape, null, [
  ...$DatedType['__exclusives__'],
]>;
const $Image = $.makeType<$Image>(_.spec, "6fbb7144-3699-11ee-b54c-07408869f946", _.syntax.literal);

const Image: $.$expr_PathNode<$.TypeSet<$Image, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Image, $.Cardinality.Many), null);

export type $PasswordλShape = $.typeutil.flatten<$DatedTypeλShape & {
  "hash": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "user": $.LinkDesc<$User, $.Cardinality.AtMostOne, {}, false, true,  false, false>;
  "<password[is User]": $.LinkDesc<$User, $.Cardinality.AtMostOne, {}, true, false,  false, false>;
  "<password[is current_user]": $.LinkDesc<$current_user, $.Cardinality.Many, {}, false, false,  false, false>;
  "<password": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Password = $.ObjectType<"default::Password", $PasswordλShape, null, [
  ...$DatedType['__exclusives__'],
]>;
const $Password = $.makeType<$Password>(_.spec, "6fc998aa-3699-11ee-a59a-11c465db21f6", _.syntax.literal);

const Password: $.$expr_PathNode<$.TypeSet<$Password, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Password, $.Cardinality.Many), null);

export type $ProductλShape = $.typeutil.flatten<$DatedTypeλShape & $HasImagesλShape & {
  "owner": $.LinkDesc<$Company, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "barcode": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, true, false, false, false>;
  "color": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "external_sync_id": $.PropertyDesc<_std.$uuid, $.Cardinality.AtMostOne, true, false, false, false>;
  "family": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "family_code": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "name": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "notes": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "price": $.PropertyDesc<_std.$float64, $.Cardinality.One, false, false, false, true>;
  "reference": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "sale_price": $.PropertyDesc<_std.$float64, $.Cardinality.AtMostOne, false, false, false, false>;
  "season": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "size": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "state": $.PropertyDesc<$ProductState, $.Cardinality.One, false, false, false, true>;
  "year": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "brand": $.LinkDesc<$Brand, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "global_category": $.LinkDesc<_category.$GlobalCategory, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "owner_category": $.LinkDesc<_category.$OwnerCategory, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "ean": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, true, false, false, false>;
  "<products[is Image]": $.LinkDesc<$Image, $.Cardinality.Many, {}, false, false,  false, false>;
  "<products": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Product = $.ObjectType<"default::Product", $ProductλShape, null, [
  ...$DatedType['__exclusives__'],
  ...$HasImages['__exclusives__'],
  {barcode: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
  {external_sync_id: {__element__: _std.$uuid, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
  {ean: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $Product = $.makeType<$Product>(_.spec, "6fc55e0c-3699-11ee-a047-4f89921f1f1d", _.syntax.literal);

const Product: $.$expr_PathNode<$.TypeSet<$Product, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Product, $.Cardinality.Many), null);

export type $SessionλShape = $.typeutil.flatten<$DatedTypeλShape & {
  "user": $.LinkDesc<$User, $.Cardinality.One, {}, false, false,  false, false>;
  "expires_at": $.PropertyDesc<_std.$datetime, $.Cardinality.One, false, false, false, false>;
  "<sessions[is User]": $.LinkDesc<$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "<sessions[is current_user]": $.LinkDesc<$current_user, $.Cardinality.Many, {}, false, false,  false, false>;
  "<sessions": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Session = $.ObjectType<"default::Session", $SessionλShape, null, [
  ...$DatedType['__exclusives__'],
]>;
const $Session = $.makeType<$Session>(_.spec, "6fca9e4e-3699-11ee-8d4f-17e16d837f8f", _.syntax.literal);

const Session: $.$expr_PathNode<$.TypeSet<$Session, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Session, $.Cardinality.Many), null);

export type $UserλShape = $.typeutil.flatten<$DatedTypeλShape & $HasAvatarλShape & {
  "company": $.LinkDesc<$Company, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "active": $.PropertyDesc<_std.$bool, $.Cardinality.AtMostOne, false, false, false, false>;
  "email": $.PropertyDesc<_std.$str, $.Cardinality.One, true, false, false, false>;
  "name": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "user_role": $.PropertyDesc<$AvailableRole, $.Cardinality.AtMostOne, false, false, false, true>;
  "username": $.PropertyDesc<_std.$str, $.Cardinality.One, true, false, false, false>;
  "password": $.LinkDesc<$Password, $.Cardinality.One, {}, true, false,  false, false>;
  "sessions": $.LinkDesc<$Session, $.Cardinality.Many, {}, false, true,  false, false>;
  "category_permissons": $.PropertyDesc<$UserPermissons, $.Cardinality.Many, false, false, false, false>;
  "b2b_product_permissons": $.PropertyDesc<$UserPermissons, $.Cardinality.Many, false, false, false, false>;
  "b2c_product_permissons": $.PropertyDesc<$UserPermissons, $.Cardinality.Many, false, false, false, false>;
  "client_product_permissons": $.PropertyDesc<$UserPermissons, $.Cardinality.Many, false, false, false, false>;
  "<users[is Company]": $.LinkDesc<$Company, $.Cardinality.Many, {}, false, false,  false, false>;
  "<user[is Session]": $.LinkDesc<$Session, $.Cardinality.Many, {}, false, false,  false, false>;
  "<user[is Password]": $.LinkDesc<$Password, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owner[is common::HasUserOwner]": $.LinkDesc<_common.$HasUserOwner, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owner[is common::HasUserOwnerPrivate]": $.LinkDesc<_common.$HasUserOwnerPrivate, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owner[is client::orders::PurchaseOrder]": $.LinkDesc<_orders.$PurchaseOrder, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owner[is client::orders::PurchaseOrderLine]": $.LinkDesc<_orders.$PurchaseOrderLine, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owner": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<user": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<users": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $User = $.ObjectType<"default::User", $UserλShape, null, [
  ...$DatedType['__exclusives__'],
  ...$HasAvatar['__exclusives__'],
  {email: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
  {username: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
  {password: {__element__: $Password, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $User = $.makeType<$User>(_.spec, "6fc1e2c2-3699-11ee-bfe8-dd75768520cf", _.syntax.literal);

const User: $.$expr_PathNode<$.TypeSet<$User, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($User, $.Cardinality.Many), null);

export type $VerificationλShape = $.typeutil.flatten<$DatedTypeλShape & {
  "ttarget": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "ttype": $.PropertyDesc<$VerificationType, $.Cardinality.One, false, false, false, false>;
  "algorithm": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "period": $.PropertyDesc<_std.$int64, $.Cardinality.One, false, false, false, false>;
  "expires_at": $.PropertyDesc<_std.$datetime, $.Cardinality.One, false, true, false, false>;
  "digits": $.PropertyDesc<_std.$int64, $.Cardinality.One, false, false, false, false>;
  "secret": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
}>;
type $Verification = $.ObjectType<"default::Verification", $VerificationλShape, null, [
  ...$DatedType['__exclusives__'],
  {ttarget: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },ttype: {__element__: $VerificationType, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $Verification = $.makeType<$Verification>(_.spec, "6fcbec2c-3699-11ee-85fb-ef32faeaeac5", _.syntax.literal);

const Verification: $.$expr_PathNode<$.TypeSet<$Verification, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Verification, $.Cardinality.Many), null);

export type $api_current_accountλShape = $.typeutil.flatten<_account.$AccountλShape & {
}>;
type $api_current_account = $.ObjectType<"default::api_current_account", $api_current_accountλShape, null, [
  ..._account.$Account['__exclusives__'],
]>;
const $api_current_account = $.makeType<$api_current_account>(_.spec, "941e8e54-3699-11ee-810d-efe0b3ed60f5", _.syntax.literal);

const api_current_account: $.$expr_PathNode<$.TypeSet<$api_current_account, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($api_current_account, $.Cardinality.Many), null);

export type $api_current_userλShape = $.typeutil.flatten<_account.$UserλShape & {
}>;
type $api_current_user = $.ObjectType<"default::api_current_user", $api_current_userλShape, null, [
  ..._account.$User['__exclusives__'],
]>;
const $api_current_user = $.makeType<$api_current_user>(_.spec, "8a854144-3699-11ee-bd0e-39d83c0ee1cf", _.syntax.literal);

const api_current_user: $.$expr_PathNode<$.TypeSet<$api_current_user, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($api_current_user, $.Cardinality.Many), null);

export type $current_userλShape = $.typeutil.flatten<$UserλShape & {
}>;
type $current_user = $.ObjectType<"default::current_user", $current_userλShape, null, [
  ...$User['__exclusives__'],
]>;
const $current_user = $.makeType<$current_user>(_.spec, "73d64768-3699-11ee-ae2f-cfda32d34896", _.syntax.literal);

const current_user: $.$expr_PathNode<$.TypeSet<$current_user, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($current_user, $.Cardinality.Many), null);

const $default__globals: {  api_current_account: _.syntax.$expr_Global<
              // "default::api_current_account",
              $api_current_account,
              $.Cardinality.AtMostOne
              >,  api_current_user: _.syntax.$expr_Global<
              // "default::api_current_user",
              $api_current_user,
              $.Cardinality.AtMostOne
              >,  current_account_id: _.syntax.$expr_Global<
              // "default::current_account_id",
              _std.$uuid,
              $.Cardinality.AtMostOne
              >,  current_user: _.syntax.$expr_Global<
              // "default::current_user",
              $current_user,
              $.Cardinality.AtMostOne
              >,  current_user_id: _.syntax.$expr_Global<
              // "default::current_user_id",
              _std.$uuid,
              $.Cardinality.AtMostOne
              >} = {  api_current_account: _.syntax.makeGlobal(
              "default::api_current_account",
              $.makeType(_.spec, "941e8e54-3699-11ee-810d-efe0b3ed60f5", _.syntax.literal),
              $.Cardinality.AtMostOne) as any,  api_current_user: _.syntax.makeGlobal(
              "default::api_current_user",
              $.makeType(_.spec, "8a854144-3699-11ee-bd0e-39d83c0ee1cf", _.syntax.literal),
              $.Cardinality.AtMostOne) as any,  current_account_id: _.syntax.makeGlobal(
              "default::current_account_id",
              $.makeType(_.spec, "00000000-0000-0000-0000-000000000100", _.syntax.literal),
              $.Cardinality.AtMostOne) as any,  current_user: _.syntax.makeGlobal(
              "default::current_user",
              $.makeType(_.spec, "73d64768-3699-11ee-ae2f-cfda32d34896", _.syntax.literal),
              $.Cardinality.AtMostOne) as any,  current_user_id: _.syntax.makeGlobal(
              "default::current_user_id",
              $.makeType(_.spec, "00000000-0000-0000-0000-000000000100", _.syntax.literal),
              $.Cardinality.AtMostOne) as any};



export { AvailableRole, BrandState, ProductState, UserPermissons, VerificationType, $DatedType, DatedType, $HasAvatar, HasAvatar, $HasImages, HasImages, $ApiKey, ApiKey, $Brand, Brand, $Company, Company, $File, File, $Image, Image, $Password, Password, $Product, Product, $Session, Session, $User, User, $Verification, Verification, $api_current_account, api_current_account, $api_current_user, api_current_user, $current_user, current_user };

type __defaultExports = {
  "AvailableRole": typeof AvailableRole;
  "BrandState": typeof BrandState;
  "ProductState": typeof ProductState;
  "UserPermissons": typeof UserPermissons;
  "VerificationType": typeof VerificationType;
  "DatedType": typeof DatedType;
  "HasAvatar": typeof HasAvatar;
  "HasImages": typeof HasImages;
  "ApiKey": typeof ApiKey;
  "Brand": typeof Brand;
  "Company": typeof Company;
  "File": typeof File;
  "Image": typeof Image;
  "Password": typeof Password;
  "Product": typeof Product;
  "Session": typeof Session;
  "User": typeof User;
  "Verification": typeof Verification;
  "api_current_account": typeof api_current_account;
  "api_current_user": typeof api_current_user;
  "current_user": typeof current_user;
  "global": typeof $default__globals
};
const __defaultExports: __defaultExports = {
  "AvailableRole": AvailableRole,
  "BrandState": BrandState,
  "ProductState": ProductState,
  "UserPermissons": UserPermissons,
  "VerificationType": VerificationType,
  "DatedType": DatedType,
  "HasAvatar": HasAvatar,
  "HasImages": HasImages,
  "ApiKey": ApiKey,
  "Brand": Brand,
  "Company": Company,
  "File": File,
  "Image": Image,
  "Password": Password,
  "Product": Product,
  "Session": Session,
  "User": User,
  "Verification": Verification,
  "api_current_account": api_current_account,
  "api_current_user": api_current_user,
  "current_user": current_user,
  "global": $default__globals
};
export default __defaultExports;
